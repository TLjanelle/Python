# Requires: Python version 3
#
# Description: Parse Linux messages file (i.e., from /var/log/messages) and calculating the length of the timestamp of any of the messages 
# calculating and printing the length of the highlighted timestamps (using a function that you create which can calculate for any similar 
# string with a timestamp in front which is similar to the ones in the following four examples).

# Define a function which can calculate and print the length of the time stamps for any similar string.
def timestamp_length(msg):
    atpos = msg.find(' ')
    length = int(len(msg[0:atpos]))
    return length

# Initialize four variables, msg1, msg2, msg3, and msg4 to four strings given in Lab 07.
msg1 = "2019-10-02T02:02:56.135940-04:00 qrunix sshd[15461]: Accepted keyboard-interactive/pam for gup from 109.228.215.123 port 34576 ssh2"
msg2 = "2019-9-2T02:02:56.135940-04:00 qrunix sshd[15461]: Accepted keyboard-interactive/pam for gup from 109.228.215.123 port 34576 ssh2"
msg3 = "2019-10-02T02:02:56-04:00 qrunix sshd[15461]: Accepted keyboard-interactive/pam for gup from 109.228.215.123 port 34576 ssh2"
msg4 = "2019-10-02T02:02:56Z qrunix sshd[15461]: Accepted keyboard-interactive/pam for gup from 109.228.215.123 port 34576 ssh2"

# Create four variables (len_ts1, len_ts2, len_ts3, and len_ts4) and 
# store the length of each of the timestamps by calling the user-defined function.
len_ts1 = timestamp_length(msg1)
len_ts2 = timestamp_length(msg2)
len_ts3 = timestamp_length(msg3)
len_ts4 = timestamp_length(msg4)

# Create a variable label called that contains the string (with one whitespace character 
# before and after the equal sign): "Timestamp length = "
label = "Timestamp length = "

# Use four statements that call the print function - each printing the label variable and 
# the value stored in one of the corresponding variables which contain one of the timestamp lengths.
print(f'{label}{len_ts1}')
print(f'{label}{len_ts2}')
print(f'{label}{len_ts3}')
print(f'{label}{len_ts4}')
